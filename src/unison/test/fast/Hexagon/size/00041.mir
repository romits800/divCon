--- |
  ; ModuleID = '00041.ll'
  source_filename = "./tests/single-exec/00041.c"
  target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
  target triple = "hexagon"
  
  ; Function Attrs: norecurse nounwind readnone
  define dso_local i32 @main() local_unnamed_addr #0 {
  entry:
    br label %while.cond1.preheader
  
  while.cond1.preheader:                            ; preds = %while.end.6, %entry
    %c.032 = phi i32 [ 0, %entry ], [ %spec.select26.6, %while.end.6 ]
    %n.030 = phi i32 [ 2, %entry ], [ %inc5.6, %while.end.6 ]
    %cmp227 = icmp ult i32 %n.030, 4
    br i1 %cmp227, label %while.end, label %while.body3
  
  while.body3:                                      ; preds = %while.cond1.preheader, %while.body3
    %lsr.iv = phi i32 [ %lsr.iv.next, %while.body3 ], [ 3, %while.cond1.preheader ]
    %p.029 = phi i32 [ %spec.select, %while.body3 ], [ 1, %while.cond1.preheader ]
    %0 = add i32 %lsr.iv, -1
    %rem = urem i32 %n.030, %0
    %cmp4 = icmp eq i32 %rem, 0
    %spec.select = select i1 %cmp4, i32 0, i32 %p.029
    %mul = mul nsw i32 %lsr.iv, %lsr.iv
    %cmp2 = icmp ugt i32 %mul, %n.030
    %lsr.iv.next = add nuw i32 %lsr.iv, 1
    br i1 %cmp2, label %while.end, label %while.body3
  
  while.end:                                        ; preds = %while.body3, %while.cond1.preheader
    %p.0.lcssa = phi i32 [ 1, %while.cond1.preheader ], [ %spec.select, %while.body3 ]
    %inc5 = add nuw nsw i32 %n.030, 1
    %tobool = icmp ne i32 %p.0.lcssa, 0
    %inc7 = zext i1 %tobool to i32
    %spec.select26 = add nuw nsw i32 %c.032, %inc7
    %cmp227.1 = icmp ult i32 %inc5, 4
    br i1 %cmp227.1, label %while.end.1, label %while.body3.1
  
  while.end9:                                       ; preds = %while.end.6
    %cmp10 = icmp ne i32 %spec.select26.6, 669
    %. = zext i1 %cmp10 to i32
    ret i32 %.
  
  while.body3.1:                                    ; preds = %while.end, %while.body3.1
    %lsr.iv1 = phi i32 [ %lsr.iv.next2, %while.body3.1 ], [ 3, %while.end ]
    %p.029.1 = phi i32 [ %spec.select.1, %while.body3.1 ], [ 1, %while.end ]
    %1 = add i32 %lsr.iv1, -1
    %rem.1 = urem i32 %inc5, %1
    %cmp4.1 = icmp eq i32 %rem.1, 0
    %spec.select.1 = select i1 %cmp4.1, i32 0, i32 %p.029.1
    %mul.1 = mul nsw i32 %lsr.iv1, %lsr.iv1
    %cmp2.1 = icmp ugt i32 %mul.1, %inc5
    %lsr.iv.next2 = add nuw i32 %lsr.iv1, 1
    br i1 %cmp2.1, label %while.end.1, label %while.body3.1
  
  while.end.1:                                      ; preds = %while.body3.1, %while.end
    %p.0.lcssa.1 = phi i32 [ 1, %while.end ], [ %spec.select.1, %while.body3.1 ]
    %inc5.1 = add nuw nsw i32 %n.030, 2
    %tobool.1 = icmp ne i32 %p.0.lcssa.1, 0
    %inc7.1 = zext i1 %tobool.1 to i32
    %spec.select26.1 = add nuw nsw i32 %spec.select26, %inc7.1
    br label %while.body3.2
  
  while.body3.2:                                    ; preds = %while.body3.2, %while.end.1
    %lsr.iv3 = phi i32 [ %lsr.iv.next4, %while.body3.2 ], [ 3, %while.end.1 ]
    %p.029.2 = phi i32 [ %spec.select.2, %while.body3.2 ], [ 1, %while.end.1 ]
    %2 = add i32 %lsr.iv3, -1
    %rem.2 = urem i32 %inc5.1, %2
    %cmp4.2 = icmp eq i32 %rem.2, 0
    %spec.select.2 = select i1 %cmp4.2, i32 0, i32 %p.029.2
    %mul.2 = mul nsw i32 %lsr.iv3, %lsr.iv3
    %cmp2.2 = icmp ugt i32 %mul.2, %inc5.1
    %lsr.iv.next4 = add nuw i32 %lsr.iv3, 1
    br i1 %cmp2.2, label %while.end.2, label %while.body3.2
  
  while.end.2:                                      ; preds = %while.body3.2
    %inc5.2 = add nuw nsw i32 %n.030, 3
    %tobool.2 = icmp ne i32 %spec.select.2, 0
    %inc7.2 = zext i1 %tobool.2 to i32
    %spec.select26.2 = add nuw nsw i32 %spec.select26.1, %inc7.2
    br label %while.body3.3
  
  while.body3.3:                                    ; preds = %while.body3.3, %while.end.2
    %lsr.iv5 = phi i32 [ %lsr.iv.next6, %while.body3.3 ], [ 3, %while.end.2 ]
    %p.029.3 = phi i32 [ %spec.select.3, %while.body3.3 ], [ 1, %while.end.2 ]
    %3 = add i32 %lsr.iv5, -1
    %rem.3 = urem i32 %inc5.2, %3
    %cmp4.3 = icmp eq i32 %rem.3, 0
    %spec.select.3 = select i1 %cmp4.3, i32 0, i32 %p.029.3
    %mul.3 = mul nsw i32 %lsr.iv5, %lsr.iv5
    %cmp2.3 = icmp ugt i32 %mul.3, %inc5.2
    %lsr.iv.next6 = add nuw i32 %lsr.iv5, 1
    br i1 %cmp2.3, label %while.end.3, label %while.body3.3
  
  while.end.3:                                      ; preds = %while.body3.3
    %inc5.3 = add nuw nsw i32 %n.030, 4
    %tobool.3 = icmp ne i32 %spec.select.3, 0
    %inc7.3 = zext i1 %tobool.3 to i32
    %spec.select26.3 = add nuw nsw i32 %spec.select26.2, %inc7.3
    br label %while.body3.4
  
  while.body3.4:                                    ; preds = %while.body3.4, %while.end.3
    %lsr.iv7 = phi i32 [ %lsr.iv.next8, %while.body3.4 ], [ 3, %while.end.3 ]
    %p.029.4 = phi i32 [ %spec.select.4, %while.body3.4 ], [ 1, %while.end.3 ]
    %4 = add i32 %lsr.iv7, -1
    %rem.4 = urem i32 %inc5.3, %4
    %cmp4.4 = icmp eq i32 %rem.4, 0
    %spec.select.4 = select i1 %cmp4.4, i32 0, i32 %p.029.4
    %mul.4 = mul nsw i32 %lsr.iv7, %lsr.iv7
    %cmp2.4 = icmp ugt i32 %mul.4, %inc5.3
    %lsr.iv.next8 = add nuw i32 %lsr.iv7, 1
    br i1 %cmp2.4, label %while.end.4, label %while.body3.4
  
  while.end.4:                                      ; preds = %while.body3.4
    %inc5.4 = add nuw nsw i32 %n.030, 5
    %tobool.4 = icmp ne i32 %spec.select.4, 0
    %inc7.4 = zext i1 %tobool.4 to i32
    %spec.select26.4 = add nuw nsw i32 %spec.select26.3, %inc7.4
    br label %while.body3.5
  
  while.body3.5:                                    ; preds = %while.body3.5, %while.end.4
    %lsr.iv9 = phi i32 [ %lsr.iv.next10, %while.body3.5 ], [ 3, %while.end.4 ]
    %p.029.5 = phi i32 [ %spec.select.5, %while.body3.5 ], [ 1, %while.end.4 ]
    %5 = add i32 %lsr.iv9, -1
    %rem.5 = urem i32 %inc5.4, %5
    %cmp4.5 = icmp eq i32 %rem.5, 0
    %spec.select.5 = select i1 %cmp4.5, i32 0, i32 %p.029.5
    %mul.5 = mul nsw i32 %lsr.iv9, %lsr.iv9
    %cmp2.5 = icmp ugt i32 %mul.5, %inc5.4
    %lsr.iv.next10 = add nuw i32 %lsr.iv9, 1
    br i1 %cmp2.5, label %while.end.5, label %while.body3.5
  
  while.end.5:                                      ; preds = %while.body3.5
    %inc5.5 = add nuw nsw i32 %n.030, 6
    %tobool.5 = icmp ne i32 %spec.select.5, 0
    %inc7.5 = zext i1 %tobool.5 to i32
    %spec.select26.5 = add nuw nsw i32 %spec.select26.4, %inc7.5
    br label %while.body3.6
  
  while.body3.6:                                    ; preds = %while.body3.6, %while.end.5
    %lsr.iv11 = phi i32 [ %lsr.iv.next12, %while.body3.6 ], [ 3, %while.end.5 ]
    %p.029.6 = phi i32 [ %spec.select.6, %while.body3.6 ], [ 1, %while.end.5 ]
    %6 = add i32 %lsr.iv11, -1
    %rem.6 = urem i32 %inc5.5, %6
    %cmp4.6 = icmp eq i32 %rem.6, 0
    %spec.select.6 = select i1 %cmp4.6, i32 0, i32 %p.029.6
    %mul.6 = mul nsw i32 %lsr.iv11, %lsr.iv11
    %cmp2.6 = icmp ugt i32 %mul.6, %inc5.5
    %lsr.iv.next12 = add nuw i32 %lsr.iv11, 1
    br i1 %cmp2.6, label %while.end.6, label %while.body3.6
  
  while.end.6:                                      ; preds = %while.body3.6
    %inc5.6 = add nuw nsw i32 %n.030, 7
    %tobool.6 = icmp ne i32 %spec.select.6, 0
    %inc7.6 = zext i1 %tobool.6 to i32
    %spec.select26.6 = add nuw nsw i32 %spec.select26.5, %inc7.6
    %exitcond.6 = icmp eq i32 %inc5.6, 5000
    br i1 %exitcond.6, label %while.end9, label %while.cond1.preheader
  }
  
  attributes #0 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="hexagonv5" "target-features"="-long-calls" "unsafe-fp-math"="false" "use-soft-float"="false" }
  
  !llvm.module.flags = !{!0}
  !llvm.ident = !{!1}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"clang version 9.0.0 (http://llvm.org/git/clang.git 4e215e73ed6b499f3ccf23263c96cd188e0eda2c) (git@github.com:unison-code/llvm.git 9914ec00db7eeaf764045b9071638c2421cd32e7)"}

...
---
name:            main
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       
  - { id: 0, class: intregs, preferred-register: '' }
  - { id: 1, class: intregs, preferred-register: '' }
  - { id: 2, class: intregs, preferred-register: '' }
  - { id: 3, class: intregs, preferred-register: '' }
  - { id: 4, class: intregs, preferred-register: '' }
  - { id: 5, class: intregs, preferred-register: '' }
  - { id: 6, class: intregs, preferred-register: '' }
  - { id: 7, class: intregs, preferred-register: '' }
  - { id: 8, class: intregs, preferred-register: '' }
  - { id: 9, class: intregs, preferred-register: '' }
  - { id: 10, class: intregs, preferred-register: '' }
  - { id: 11, class: intregs, preferred-register: '' }
  - { id: 12, class: intregs, preferred-register: '' }
  - { id: 13, class: intregs, preferred-register: '' }
  - { id: 14, class: intregs, preferred-register: '' }
  - { id: 15, class: intregs, preferred-register: '' }
  - { id: 16, class: intregs, preferred-register: '' }
  - { id: 17, class: intregs, preferred-register: '' }
  - { id: 18, class: intregs, preferred-register: '' }
  - { id: 19, class: intregs, preferred-register: '' }
  - { id: 20, class: intregs, preferred-register: '' }
  - { id: 21, class: intregs, preferred-register: '' }
  - { id: 22, class: intregs, preferred-register: '' }
  - { id: 23, class: intregs, preferred-register: '' }
  - { id: 24, class: intregs, preferred-register: '' }
  - { id: 25, class: intregs, preferred-register: '' }
  - { id: 26, class: intregs, preferred-register: '' }
  - { id: 27, class: intregs, preferred-register: '' }
  - { id: 28, class: intregs, preferred-register: '' }
  - { id: 29, class: intregs, preferred-register: '' }
  - { id: 30, class: intregs, preferred-register: '' }
  - { id: 31, class: intregs, preferred-register: '' }
  - { id: 32, class: intregs, preferred-register: '' }
  - { id: 33, class: intregs, preferred-register: '' }
  - { id: 34, class: intregs, preferred-register: '' }
  - { id: 35, class: intregs, preferred-register: '' }
  - { id: 36, class: intregs, preferred-register: '' }
  - { id: 37, class: intregs, preferred-register: '' }
  - { id: 38, class: intregs, preferred-register: '' }
  - { id: 39, class: intregs, preferred-register: '' }
  - { id: 40, class: intregs, preferred-register: '' }
  - { id: 41, class: intregs, preferred-register: '' }
  - { id: 42, class: intregs, preferred-register: '' }
  - { id: 43, class: intregs, preferred-register: '' }
  - { id: 44, class: intregs, preferred-register: '' }
  - { id: 45, class: intregs, preferred-register: '' }
  - { id: 46, class: intregs, preferred-register: '' }
  - { id: 47, class: intregs, preferred-register: '' }
  - { id: 48, class: intregs, preferred-register: '' }
  - { id: 49, class: intregs, preferred-register: '' }
  - { id: 50, class: predregs, preferred-register: '' }
  - { id: 51, class: predregs, preferred-register: '' }
  - { id: 52, class: intregs, preferred-register: '' }
  - { id: 53, class: intregs, preferred-register: '' }
  - { id: 54, class: predregs, preferred-register: '' }
  - { id: 55, class: intregs, preferred-register: '' }
  - { id: 56, class: predregs, preferred-register: '' }
  - { id: 57, class: predregs, preferred-register: '' }
  - { id: 58, class: intregs, preferred-register: '' }
  - { id: 59, class: intregs, preferred-register: '' }
  - { id: 60, class: predregs, preferred-register: '' }
  - { id: 61, class: predregs, preferred-register: '' }
  - { id: 62, class: intregs, preferred-register: '' }
  - { id: 63, class: predregs, preferred-register: '' }
  - { id: 64, class: predregs, preferred-register: '' }
  - { id: 65, class: intregs, preferred-register: '' }
  - { id: 66, class: intregs, preferred-register: '' }
  - { id: 67, class: predregs, preferred-register: '' }
  - { id: 68, class: intregs, preferred-register: '' }
  - { id: 69, class: predregs, preferred-register: '' }
  - { id: 70, class: predregs, preferred-register: '' }
  - { id: 71, class: intregs, preferred-register: '' }
  - { id: 72, class: intregs, preferred-register: '' }
  - { id: 73, class: predregs, preferred-register: '' }
  - { id: 74, class: predregs, preferred-register: '' }
  - { id: 75, class: intregs, preferred-register: '' }
  - { id: 76, class: intregs, preferred-register: '' }
  - { id: 77, class: intregs, preferred-register: '' }
  - { id: 78, class: predregs, preferred-register: '' }
  - { id: 79, class: intregs, preferred-register: '' }
  - { id: 80, class: predregs, preferred-register: '' }
  - { id: 81, class: predregs, preferred-register: '' }
  - { id: 82, class: intregs, preferred-register: '' }
  - { id: 83, class: intregs, preferred-register: '' }
  - { id: 84, class: predregs, preferred-register: '' }
  - { id: 85, class: predregs, preferred-register: '' }
  - { id: 86, class: intregs, preferred-register: '' }
  - { id: 87, class: intregs, preferred-register: '' }
  - { id: 88, class: intregs, preferred-register: '' }
  - { id: 89, class: predregs, preferred-register: '' }
  - { id: 90, class: intregs, preferred-register: '' }
  - { id: 91, class: predregs, preferred-register: '' }
  - { id: 92, class: predregs, preferred-register: '' }
  - { id: 93, class: intregs, preferred-register: '' }
  - { id: 94, class: intregs, preferred-register: '' }
  - { id: 95, class: predregs, preferred-register: '' }
  - { id: 96, class: predregs, preferred-register: '' }
  - { id: 97, class: intregs, preferred-register: '' }
  - { id: 98, class: intregs, preferred-register: '' }
  - { id: 99, class: intregs, preferred-register: '' }
  - { id: 100, class: predregs, preferred-register: '' }
  - { id: 101, class: intregs, preferred-register: '' }
  - { id: 102, class: predregs, preferred-register: '' }
  - { id: 103, class: predregs, preferred-register: '' }
  - { id: 104, class: intregs, preferred-register: '' }
  - { id: 105, class: intregs, preferred-register: '' }
  - { id: 106, class: predregs, preferred-register: '' }
  - { id: 107, class: predregs, preferred-register: '' }
  - { id: 108, class: intregs, preferred-register: '' }
  - { id: 109, class: intregs, preferred-register: '' }
  - { id: 110, class: intregs, preferred-register: '' }
  - { id: 111, class: predregs, preferred-register: '' }
  - { id: 112, class: intregs, preferred-register: '' }
  - { id: 113, class: predregs, preferred-register: '' }
  - { id: 114, class: predregs, preferred-register: '' }
  - { id: 115, class: intregs, preferred-register: '' }
  - { id: 116, class: intregs, preferred-register: '' }
  - { id: 117, class: predregs, preferred-register: '' }
  - { id: 118, class: predregs, preferred-register: '' }
  - { id: 119, class: intregs, preferred-register: '' }
  - { id: 120, class: intregs, preferred-register: '' }
  - { id: 121, class: intregs, preferred-register: '' }
  - { id: 122, class: predregs, preferred-register: '' }
  - { id: 123, class: intregs, preferred-register: '' }
  - { id: 124, class: predregs, preferred-register: '' }
  - { id: 125, class: predregs, preferred-register: '' }
  - { id: 126, class: predregs, preferred-register: '' }
  - { id: 127, class: predregs, preferred-register: '' }
  - { id: 128, class: intregs, preferred-register: '' }
  - { id: 129, class: predregs, preferred-register: '' }
  - { id: 130, class: intregs, preferred-register: '' }
liveins:         []
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    0
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
constants:       []
body:             |
  bb.0.entry (freq 8):
    successors: %bb.1(100)
  
    ANNOTATION_LABEL <0x8950240> = !{!"unison-block-frequency", i64 8}
    %47:intregs = A2_tfrsi 2
    %46:intregs = A2_tfrsi 0
  
  bb.1.while.cond1.preheader (freq 255):
    successors: %bb.3(50), %bb.2(50)
  
    ANNOTATION_LABEL <0x891cd50> = !{!"unison-block-frequency", i64 255}
    %0:intregs = PHI %46, %bb.0, %45, %bb.16
    %1:intregs = PHI %47, %bb.0, %44, %bb.16
    %50:predregs = C2_cmpgtui %1, 3
    %49:intregs = A2_tfrsi 3
    %48:intregs = A2_tfrsi 1
    J2_jumpf killed %50, %bb.3, implicit-def dead $pc
    J2_jump %bb.2, implicit-def dead $pc
  
  bb.2.while.body3 (freq 4095):
    successors: %bb.3(3), %bb.2(96)
  
    ANNOTATION_LABEL <0x896d600> = !{!"unison-block-frequency", i64 4095}
    %2:intregs = PHI %49, %bb.1, %5, %bb.2
    %3:intregs = PHI %48, %bb.1, %4, %bb.2
    %52:intregs = A2_addi %2, -1
    ADJCALLSTACKDOWN 0, 0, implicit-def $r29, implicit-def dead $r30, implicit $r31, implicit $r30, implicit $r29
    $r0 = COPY %1
    $r1 = COPY killed %52
    J2_call &__hexagon_umodsi3, hexagoncsr, implicit-def dead $pc, implicit-def dead $r31, implicit $r29, implicit killed $r0, implicit killed $r1, implicit-def $r29, implicit-def $r0
    ADJCALLSTACKUP 0, 0, implicit-def dead $r29, implicit-def dead $r30, implicit-def dead $r31, implicit $r29
    %53:intregs = COPY killed $r0
    %54:predregs = C2_cmpeqi killed %53, 0
    %4:intregs = C2_muxri killed %54, 0, killed %3
    %55:intregs = nsw M2_mpyi %2, %2
    %56:predregs = C2_cmpgtu killed %55, %1
    %5:intregs = nuw A2_addi killed %2, 1
    J2_jumpf killed %56, %bb.2, implicit-def dead $pc
    J2_jump %bb.3, implicit-def dead $pc
  
  bb.3.while.end (freq 255):
    successors: %bb.6(50), %bb.5(50)
  
    ANNOTATION_LABEL <0x891cd50> = !{!"unison-block-frequency", i64 255}
    %6:intregs = PHI %48, %bb.1, %4, %bb.2
    %7:intregs = nuw nsw A2_addi %1, 1
    %60:predregs = C2_cmpeqi killed %6, 0
    %62:intregs = A2_addi %0, 1
    %8:intregs = C2_mux killed %60, killed %0, killed %62
    %63:predregs = C2_cmpgtui %7, 3
    %59:intregs = A2_tfrsi 3
    J2_jumpf killed %63, %bb.6, implicit-def dead $pc
    J2_jump %bb.5, implicit-def dead $pc
  
  bb.4.while.end9 (freq 8):
    liveouts: $pc, $r0
  
    ANNOTATION_LABEL <0x8950240> = !{!"unison-block-frequency", i64 8}
    %130:intregs = A4_rcmpneqi killed %45, 669
    $r0 = COPY killed %130
    PS_jmpret $r31, implicit-def dead $pc, implicit killed $r0
  
  bb.5.while.body3.1 (freq 4095):
    successors: %bb.6(3), %bb.5(96)
  
    ANNOTATION_LABEL <0x896d600> = !{!"unison-block-frequency", i64 4095}
    %9:intregs = PHI %59, %bb.3, %12, %bb.5
    %10:intregs = PHI %48, %bb.3, %11, %bb.5
    %65:intregs = A2_addi %9, -1
    ADJCALLSTACKDOWN 0, 0, implicit-def $r29, implicit-def dead $r30, implicit $r31, implicit $r30, implicit $r29
    $r0 = COPY %7
    $r1 = COPY killed %65
    J2_call &__hexagon_umodsi3, hexagoncsr, implicit-def dead $pc, implicit-def dead $r31, implicit $r29, implicit killed $r0, implicit killed $r1, implicit-def $r29, implicit-def $r0
    ADJCALLSTACKUP 0, 0, implicit-def dead $r29, implicit-def dead $r30, implicit-def dead $r31, implicit $r29
    %66:intregs = COPY killed $r0
    %67:predregs = C2_cmpeqi killed %66, 0
    %11:intregs = C2_muxri killed %67, 0, killed %10
    %68:intregs = nsw M2_mpyi %9, %9
    %69:predregs = C2_cmpgtu killed %68, %7
    %12:intregs = nuw A2_addi killed %9, 1
    J2_jumpf killed %69, %bb.5, implicit-def dead $pc
    J2_jump %bb.6, implicit-def dead $pc
  
  bb.6.while.end.1 (freq 255):
    successors: %bb.7(100)
  
    ANNOTATION_LABEL <0x891cd50> = !{!"unison-block-frequency", i64 255}
    %13:intregs = PHI %48, %bb.3, %11, %bb.5
    %14:intregs = nuw nsw A2_addi %1, 2
    %73:predregs = C2_cmpeqi killed %13, 0
    %75:intregs = A2_addi %8, 1
    %15:intregs = C2_mux killed %73, killed %8, killed %75
    %72:intregs = A2_tfrsi 1
    %71:intregs = A2_tfrsi 3
  
  bb.7.while.body3.2 (freq 8191):
    successors: %bb.8(3), %bb.7(96)
  
    ANNOTATION_LABEL <0x8956c40> = !{!"unison-block-frequency", i64 8191}
    %16:intregs = PHI %71, %bb.6, %19, %bb.7
    %17:intregs = PHI %72, %bb.6, %18, %bb.7
    %76:intregs = A2_addi %16, -1
    ADJCALLSTACKDOWN 0, 0, implicit-def $r29, implicit-def dead $r30, implicit $r31, implicit $r30, implicit $r29
    $r0 = COPY %14
    $r1 = COPY killed %76
    J2_call &__hexagon_umodsi3, hexagoncsr, implicit-def dead $pc, implicit-def dead $r31, implicit $r29, implicit killed $r0, implicit killed $r1, implicit-def $r29, implicit-def $r0
    ADJCALLSTACKUP 0, 0, implicit-def dead $r29, implicit-def dead $r30, implicit-def dead $r31, implicit $r29
    %77:intregs = COPY killed $r0
    %78:predregs = C2_cmpeqi killed %77, 0
    %18:intregs = C2_muxri killed %78, 0, killed %17
    %79:intregs = nsw M2_mpyi %16, %16
    %80:predregs = C2_cmpgtu killed %79, %14
    %19:intregs = nuw A2_addi killed %16, 1
    J2_jumpf killed %80, %bb.7, implicit-def dead $pc
    J2_jump %bb.8, implicit-def dead $pc
  
  bb.8.while.end.2 (freq 255):
    successors: %bb.9(100)
  
    ANNOTATION_LABEL <0x891cd50> = !{!"unison-block-frequency", i64 255}
    %20:intregs = nuw nsw A2_addi %1, 3
    %84:predregs = C2_cmpeqi killed %18, 0
    %86:intregs = A2_addi %15, 1
    %21:intregs = C2_mux killed %84, killed %15, killed %86
    %83:intregs = A2_tfrsi 1
    %82:intregs = A2_tfrsi 3
  
  bb.9.while.body3.3 (freq 8191):
    successors: %bb.10(3), %bb.9(96)
  
    ANNOTATION_LABEL <0x8956c40> = !{!"unison-block-frequency", i64 8191}
    %22:intregs = PHI %82, %bb.8, %25, %bb.9
    %23:intregs = PHI %83, %bb.8, %24, %bb.9
    %87:intregs = A2_addi %22, -1
    ADJCALLSTACKDOWN 0, 0, implicit-def $r29, implicit-def dead $r30, implicit $r31, implicit $r30, implicit $r29
    $r0 = COPY %20
    $r1 = COPY killed %87
    J2_call &__hexagon_umodsi3, hexagoncsr, implicit-def dead $pc, implicit-def dead $r31, implicit $r29, implicit killed $r0, implicit killed $r1, implicit-def $r29, implicit-def $r0
    ADJCALLSTACKUP 0, 0, implicit-def dead $r29, implicit-def dead $r30, implicit-def dead $r31, implicit $r29
    %88:intregs = COPY killed $r0
    %89:predregs = C2_cmpeqi killed %88, 0
    %24:intregs = C2_muxri killed %89, 0, killed %23
    %90:intregs = nsw M2_mpyi %22, %22
    %91:predregs = C2_cmpgtu killed %90, %20
    %25:intregs = nuw A2_addi killed %22, 1
    J2_jumpf killed %91, %bb.9, implicit-def dead $pc
    J2_jump %bb.10, implicit-def dead $pc
  
  bb.10.while.end.3 (freq 255):
    successors: %bb.11(100)
  
    ANNOTATION_LABEL <0x891cd50> = !{!"unison-block-frequency", i64 255}
    %26:intregs = nuw nsw A2_addi %1, 4
    %95:predregs = C2_cmpeqi killed %24, 0
    %97:intregs = A2_addi %21, 1
    %27:intregs = C2_mux killed %95, killed %21, killed %97
    %94:intregs = A2_tfrsi 1
    %93:intregs = A2_tfrsi 3
  
  bb.11.while.body3.4 (freq 8191):
    successors: %bb.12(3), %bb.11(96)
  
    ANNOTATION_LABEL <0x8956c40> = !{!"unison-block-frequency", i64 8191}
    %28:intregs = PHI %93, %bb.10, %31, %bb.11
    %29:intregs = PHI %94, %bb.10, %30, %bb.11
    %98:intregs = A2_addi %28, -1
    ADJCALLSTACKDOWN 0, 0, implicit-def $r29, implicit-def dead $r30, implicit $r31, implicit $r30, implicit $r29
    $r0 = COPY %26
    $r1 = COPY killed %98
    J2_call &__hexagon_umodsi3, hexagoncsr, implicit-def dead $pc, implicit-def dead $r31, implicit $r29, implicit killed $r0, implicit killed $r1, implicit-def $r29, implicit-def $r0
    ADJCALLSTACKUP 0, 0, implicit-def dead $r29, implicit-def dead $r30, implicit-def dead $r31, implicit $r29
    %99:intregs = COPY killed $r0
    %100:predregs = C2_cmpeqi killed %99, 0
    %30:intregs = C2_muxri killed %100, 0, killed %29
    %101:intregs = nsw M2_mpyi %28, %28
    %102:predregs = C2_cmpgtu killed %101, %26
    %31:intregs = nuw A2_addi killed %28, 1
    J2_jumpf killed %102, %bb.11, implicit-def dead $pc
    J2_jump %bb.12, implicit-def dead $pc
  
  bb.12.while.end.4 (freq 255):
    successors: %bb.13(100)
  
    ANNOTATION_LABEL <0x891cd50> = !{!"unison-block-frequency", i64 255}
    %32:intregs = nuw nsw A2_addi %1, 5
    %106:predregs = C2_cmpeqi killed %30, 0
    %108:intregs = A2_addi %27, 1
    %33:intregs = C2_mux killed %106, killed %27, killed %108
    %105:intregs = A2_tfrsi 1
    %104:intregs = A2_tfrsi 3
  
  bb.13.while.body3.5 (freq 8191):
    successors: %bb.14(3), %bb.13(96)
  
    ANNOTATION_LABEL <0x8956c40> = !{!"unison-block-frequency", i64 8191}
    %34:intregs = PHI %104, %bb.12, %37, %bb.13
    %35:intregs = PHI %105, %bb.12, %36, %bb.13
    %109:intregs = A2_addi %34, -1
    ADJCALLSTACKDOWN 0, 0, implicit-def $r29, implicit-def dead $r30, implicit $r31, implicit $r30, implicit $r29
    $r0 = COPY %32
    $r1 = COPY killed %109
    J2_call &__hexagon_umodsi3, hexagoncsr, implicit-def dead $pc, implicit-def dead $r31, implicit $r29, implicit killed $r0, implicit killed $r1, implicit-def $r29, implicit-def $r0
    ADJCALLSTACKUP 0, 0, implicit-def dead $r29, implicit-def dead $r30, implicit-def dead $r31, implicit $r29
    %110:intregs = COPY killed $r0
    %111:predregs = C2_cmpeqi killed %110, 0
    %36:intregs = C2_muxri killed %111, 0, killed %35
    %112:intregs = nsw M2_mpyi %34, %34
    %113:predregs = C2_cmpgtu killed %112, %32
    %37:intregs = nuw A2_addi killed %34, 1
    J2_jumpf killed %113, %bb.13, implicit-def dead $pc
    J2_jump %bb.14, implicit-def dead $pc
  
  bb.14.while.end.5 (freq 255):
    successors: %bb.15(100)
  
    ANNOTATION_LABEL <0x891cd50> = !{!"unison-block-frequency", i64 255}
    %38:intregs = nuw nsw A2_addi %1, 6
    %117:predregs = C2_cmpeqi killed %36, 0
    %119:intregs = A2_addi %33, 1
    %39:intregs = C2_mux killed %117, killed %33, killed %119
    %116:intregs = A2_tfrsi 1
    %115:intregs = A2_tfrsi 3
  
  bb.15.while.body3.6 (freq 8191):
    successors: %bb.16(3), %bb.15(96)
  
    ANNOTATION_LABEL <0x8956c40> = !{!"unison-block-frequency", i64 8191}
    %40:intregs = PHI %115, %bb.14, %43, %bb.15
    %41:intregs = PHI %116, %bb.14, %42, %bb.15
    %120:intregs = A2_addi %40, -1
    ADJCALLSTACKDOWN 0, 0, implicit-def $r29, implicit-def dead $r30, implicit $r31, implicit $r30, implicit $r29
    $r0 = COPY %38
    $r1 = COPY killed %120
    J2_call &__hexagon_umodsi3, hexagoncsr, implicit-def dead $pc, implicit-def dead $r31, implicit $r29, implicit killed $r0, implicit killed $r1, implicit-def $r29, implicit-def $r0
    ADJCALLSTACKUP 0, 0, implicit-def dead $r29, implicit-def dead $r30, implicit-def dead $r31, implicit $r29
    %121:intregs = COPY killed $r0
    %122:predregs = C2_cmpeqi killed %121, 0
    %42:intregs = C2_muxri killed %122, 0, killed %41
    %123:intregs = nsw M2_mpyi %40, %40
    %124:predregs = C2_cmpgtu killed %123, %38
    %43:intregs = nuw A2_addi killed %40, 1
    J2_jumpf killed %124, %bb.15, implicit-def dead $pc
    J2_jump %bb.16, implicit-def dead $pc
  
  bb.16.while.end.6 (freq 255):
    successors: %bb.4(3), %bb.1(96)
  
    ANNOTATION_LABEL <0x891cd50> = !{!"unison-block-frequency", i64 255}
    %44:intregs = nuw nsw A2_addi killed %1, 7
    %126:predregs = C2_cmpeqi killed %42, 0
    %128:intregs = A2_addi %39, 1
    %45:intregs = C2_mux killed %126, killed %39, killed %128
    %129:predregs = C2_cmpeqi %44, 5000
    J2_jumpt killed %129, %bb.4, implicit-def dead $pc
    J2_jump %bb.1, implicit-def dead $pc

...
